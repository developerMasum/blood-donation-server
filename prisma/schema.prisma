// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  profilePhoto String?
  role         UserRole?  @default(USER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // donner Donner? @relation(fields: [donnerId], references: [id])
  sendRequests Requests[]
}

model Donor {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  bloodType      String
  totalDonations Int?      @default(0)
  role           UserRole? @default(DONOR)
  location       String
  availability   Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  DonorProfile DonorProfile?
  gotRequests  Requests[]
}

model DonorProfile {
  id               String   @id @default(uuid())
  donorId          String   @unique
  bio              String?
  age              String?
  contactNumber    String
  profilePhoto     String?
  lastDonationDate String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  donor Donor? @relation(fields: [donorId], references: [id])
}

// Request model
model Requests {
  id              String   @id @default(uuid())
  donorId         String
  requesterId     String
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  requester       User?    @relation(fields: [requesterId], references: [id])
  donor           Donor?   @relation(fields: [donorId], references: [id])
}

model Blogs {
  id          String   @id @default(uuid())
  title       String
  image       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
  DONOR
}
